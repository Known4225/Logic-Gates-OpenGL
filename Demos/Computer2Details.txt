Details for the file: ComputerMk2.lg

Specs:
16-bit instruction length
Eight 16-bit registers
64 Bytes of 16-bit memory (no distinction between program and addressable memory)
6-bit program counter

MIPS16ALU implementation on the ComputerMk2:
0000 - ADD
0001 - SUB
0010 - AND
0011 - OR
0100 - XOR
0101 - NOR
0110 - NAND
0111 - CMP (a >= b)
1000 - SHL
1001 - SHR


Instruction Set:
add(inp1, inp2, out)  - 00000 {000} {001} {010} 00
sub(inp1, inp2, out)  - 00000 {000} {001} {010} 01
and(inp1, inp2, out)  - 00000 {000} {001} {010} 10
or(inp1, inp2, out)   - 00000 {000} {001} {010} 11
xor(inp1, inp2, out)  - 00001 {000} {001} {010} 00
nor(inp1, inp2, out)  - 00001 {000} {001} {010} 01
nand(inp1, inp2, out) - 00001 {000} {001} {010} 10

shl(inp1) - 00010 {000} 00000000
shr(inp1) - 00011 {000} 00000001

addi(inp1, out, constant) - 00100 {000} {001} {10001}
subi(inp1, out, constant) - 00101 {000} {001} {00100}

load(out, src, offset) - 01000 {000} {001} {00100}
load(out, address) - 01001 {000} {00000001}
load(out, constant) - 01010 {000} {00110110}
save(in, src, addressregister) - 01011 {000} {001} 00000
save(in, address) - 01100 {000} {00000001}

load_to_digit_display(inp1, offset) - 01100 {000} {00000000}

load_to_matrix_display(inp1, control) - 01101 {000} {000000} 00 // loads to top two rows
load_to_matrix_display(inp1, control) - 01101 {000} {000000} 01 // loads top middle two rows
load_to_matrix_display(inp1, control) - 01101 {000} {000000} 10 // loads bottom middle two rows
load_to_matrix_display(inp1, control) - 01101 {000} {000000} 11 // loads bottom two roads
/* Note: control code is either 00000 (update matrix immediately) or 00001 (don't update matrix).
   Also the second bit 00010 controls a mass update. Where registers inp1, inp1 + 1, inp1 + 2, and inp1 + 3 are loaded in all at once
*/

jump(constant) - 10000 {10100100} 000
jump(jmpto) - 10000 {000} 00000001

jump_if_equal(inp1, inp2, jmpto) - 10010 {000} {001} {010} 00
jump_if_not_equal(inp1, inp2, jmpto) - 10010 {000} {001} {010} 01
jump_if_greater(inp1, inp2, jmpto) - 10010 {000} {001} {010} 10
jump_if_less(inp1, inp2, jmpto) - 10010 {000} {001} {010} 11

jump_if_even(inp1, jmpto) - 10011 {000} {001} 000 00
jump_if_odd(inp1, jmpto) - 10011 {000} {001} 000 01
jump_if_greater_or_equal(inp1, inp2, jmpto) - 10011 {000} {001} {010} 10
jump_if_less_or_equal(inp1, inp2, jmpto) - 10011 {000} {001} {010} 11




Eventual extension:
https://www.ijtsrd.com/papers/ijtsrd53897.pdf
A multiplier

FPU when?